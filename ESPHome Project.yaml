#Begin the project and provide a name for it
esphome:
  name: lxf-test-1

#Set the microcontroller type and the board being used
esp8266:
  board: d1_mini

#Enable logging and set the level to show INFO or DEBUG. DEBUG may be needed for part two of the second projects, where the serial number of the connected DS18B20 sensor is determined 
logger:
  level: DEBUG

#Enable Home Assistant API communication between the microcontroller and HomeAssistant
api:
  password: "123456" #This is optional. A password is not required and this line can safely be omitted
  
#Add functionality for upgrades via wifi. Set a password to add some security to the update process
ota:
  password: "804261d78a28df9f92040fed362550f5" #This is automatically set when the project is created

#Set wifi details for the network that the microcontroller will connect to
wifi:
  ssid: NAME_OF_SSID
  password: SSID_PSK

  #Enable fallback hotspot (captive portal) in case wifi connection fails. This then allows connection via a web browser from a device connected to the hotspot created by ESPHome.
  #This is automatically added when the project is created.
  ap:
    ssid: "Lxf-Test-1 Fallback Hotspot"
    password: "oZz64HjUlC4U"

captive_portal:

#Enable Web server, which allows control of the device from a web browser connected to the microcontrollers IP address. This is optional and uses significant resources on the microcontroller
web_server:
  port: 80

#Sync time with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time
    
#Add some substitutions that can be referenced multiple times within the setup. Think of these as variables 
substitutions:
  device_name: LinuxFormatTesting
  friendly_name: LXFTest
  device_description: "LXF Test ESPHome project"
      
#Set up the D2 pin as an output device
output:
  - platform: gpio
    pin: D2
    id: 'output_component1'

#Set up a light device type and bind it to the previously defined output device
light:
  - platform: binary
    name: '${friendly_name} - LED 1' #Note the usage of the substitution / variable
    output: output_component1

#Set up the switch on GPIO D1, set debounce and set actions to be completed when the switch is pressed and released
binary_sensor:
  - platform: gpio
    name: '${friendly_name} - Switch 1' #Note the usage of the substitution / variable
    pin:
      number: D1
      inverted: True #Inverted as the input is HIGH / ON when the button is released 
      mode: INPUT_PULLUP
    filters:
      - delayed_off: 10ms
    on_press:
    - output.turn_on: output_component1
    on_release:
    - output.turn_off: output_component1

#Define the Dallas Temperature Sensor module and assign it to pin D5
dallas:
  - pin: D5

#Define sensors that report information back to Home Assistant
sensor:
##Register a sensor's serial number to be able to read the temperature value and report it back
#  - platform: dallas
#    address: 0x9303170249fcff28
#    unit_of_measurement: "Â°C"
#    name: '${friendly_name} - Temperature'
#UNCOMMENT THE ABOVE WHEN THE SERIAL NUMBER HAS BEEN DETERMINED

    #Uptime sensor to report back how long the microcontroller is up for
  - platform: uptime
    name: '${friendly_name} - Uptime'
    unit_of_measurement: "s"
    # Report back the strength of the Wifi signal
  - platform: wifi_signal
    name: '${friendly_name} - WiFi Signal Strength'
    update_interval: 60s
    unit_of_measurement: "dB"

#Define text sensors with general information
text_sensor:
  #Report back the version of the ESPHome firmware
  - platform: version
    name: '${friendly_name} - version'
  #Report back wifi information, such as IP address, SSID name and BSSID name
  - platform: wifi_info
    ip_address:
      name: '${friendly_name} - ip'
    ssid:
      name: '${friendly_name} - ssid'
    bssid:
      name: '${friendly_name} - bssid'
      
switch:      
  #Define a switch to restart the microcontroller board
  - platform: restart
    name: restart